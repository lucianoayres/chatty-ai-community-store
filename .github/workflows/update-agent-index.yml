name: Update Agent Index

on:
  push:
    branches:
      - main
    paths:
      - "agents/**.yaml"

jobs:
  update-index:
    name: Update Agent Index
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for proper comparison

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          pip install pyyaml jsonschema yamale

      - name: Validate changed agent files
        id: validation
        run: |
          echo "::group::Validating changed agent files"
          # Get list of changed files
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD | grep "^agents/.*\.yaml$" || echo "")
          echo "Changed agent files:"
          echo "$CHANGED_FILES"

          if [ -z "$CHANGED_FILES" ]; then
            echo "No agent YAML files were changed."
            echo "validation_passed=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Setup validation environment
          export PYTHONPATH="$PWD/tools/agent_manager/src:$PYTHONPATH"

          # Validate each changed file
          mkdir -p validation_logs
          VALIDATION_LOG="validation_logs/validation_results.txt"
          ERROR_SUMMARY="validation_logs/error_summary.txt"
          echo "Validation results:" | tee -a $VALIDATION_LOG
          echo "====================" | tee -a $VALIDATION_LOG
          echo "" | tee -a $VALIDATION_LOG

          FAIL_COUNT=0
          echo "" > $ERROR_SUMMARY

          for file in $CHANGED_FILES; do
            echo "Validating $file..." | tee -a $VALIDATION_LOG
            echo "--------------------" | tee -a $VALIDATION_LOG
            
            # Run the validator on the file and capture output
            VALIDATION_OUTPUT=$(python tools/agent_manager/src/validator.py \
              --yaml-schema schemas/agent.schema.yaml \
              --file "$file" \
              --tag-definitions tags.json \
              --verbose \
              2>&1)
            
            VALIDATION_EXIT_CODE=$?
            echo "$VALIDATION_OUTPUT" | tee -a $VALIDATION_LOG
              
            # Check if validation failed
            if [ $VALIDATION_EXIT_CODE -ne 0 ]; then
              FAIL_COUNT=$((FAIL_COUNT+1))
              
              # Add error details to summary for easy reference
              echo "❌ File: $file" | tee -a $ERROR_SUMMARY
              
              # Extract and format error messages for better visibility
              ERROR_DETAILS=$(echo "$VALIDATION_OUTPUT" | grep -E "Error|Invalid|failed|missing|required" | sed 's/^/  /')
              
              if [ -n "$ERROR_DETAILS" ]; then
                echo "  Error details:" | tee -a $ERROR_SUMMARY
                echo "$ERROR_DETAILS" | tee -a $ERROR_SUMMARY
              else
                echo "  Unknown validation error. See logs for details." | tee -a $ERROR_SUMMARY
              fi
              
              # Add separator for readability
              echo "" | tee -a $ERROR_SUMMARY
              
              # Add error annotation for GitHub Actions UI
              echo "::error file=$file::Validation failed: $(echo "$ERROR_DETAILS" | head -n 1)"
            else
              echo "✅ File passed validation: $file" | tee -a $ERROR_SUMMARY
            fi
            
            echo "" | tee -a $VALIDATION_LOG
            echo "" | tee -a $VALIDATION_LOG
          done

          # Determine overall result
          if [ $FAIL_COUNT -gt 0 ]; then
            # Print error summary to make it clearly visible in workflow logs
            echo "============================================="
            echo "❌ VALIDATION FAILED: $FAIL_COUNT files have issues"
            echo "============================================="
            echo ""
            cat $ERROR_SUMMARY
            echo ""
            echo "See validation logs for complete details"
            
            echo "validation_passed=false" >> $GITHUB_OUTPUT
            echo "fail_count=$FAIL_COUNT" >> $GITHUB_OUTPUT
            echo "error_summary<<EOF" >> $GITHUB_OUTPUT
            cat $ERROR_SUMMARY >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            
            exit 1
          else
            echo "validation_passed=true" >> $GITHUB_OUTPUT
            echo "✅ All agent files passed validation!" | tee -a $VALIDATION_LOG
          fi
          echo "::endgroup::"

      - name: Upload validation results
        if: steps.validation.outputs.validation_passed == 'false' || failure()
        uses: actions/upload-artifact@v4
        with:
          name: validation-results
          path: validation_logs/validation_results.txt

      - name: Run manage_agents.sh script
        id: update-index
        if: steps.validation.outputs.validation_passed == 'true'
        run: |
          echo "::group::Updating Agent Index"
          # Only run if validation passed
          bash tools/agent_manager/manage_agents.sh

          # Check if index file was modified
          if git diff --name-only | grep -q "agent_index.json"; then
            echo "index_updated=true" >> $GITHUB_OUTPUT
            echo "Agent index was updated!"
          else
            echo "index_updated=false" >> $GITHUB_OUTPUT
            echo "No changes to agent index."
          fi
          echo "::endgroup::"

      - name: Commit updated index
        if: steps.validation.outputs.validation_passed == 'true' && steps.update-index.outputs.index_updated == 'true'
        run: |
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Add and commit the changes
          git add agent_index.json
          git commit -m "🤖 Auto-update agent index [skip ci]" -m "Triggered by commit ${GITHUB_SHA}"

          # Push the changes
          git push

      - name: Find related PR
        if: steps.validation.outputs.validation_passed == 'true' && steps.update-index.outputs.index_updated == 'true'
        id: find-pr
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            // Find the most recent PR that was merged into this branch
            const query = `
              query($owner:String!, $repo:String!) {
                repository(owner:$owner, name:$repo) {
                  pullRequests(last:10, states:MERGED, orderBy:{field:UPDATED_AT, direction:DESC}) {
                    nodes {
                      number
                      title
                      mergedAt
                      url
                      mergeCommit {
                        oid
                      }
                    }
                  }
                }
              }
            `;

            const variables = {
              owner: context.repo.owner,
              repo: context.repo.repo
            };

            const result = await github.graphql(query, variables);
            const prs = result.repository.pullRequests.nodes;

            // Try to find a PR that matches the current commit
            let relatedPR = null;
            const targetCommit = context.payload.after;

            for (const pr of prs) {
              if (pr.mergeCommit && pr.mergeCommit.oid === targetCommit) {
                relatedPR = pr;
                break;
              }
            }

            if (relatedPR) {
              core.setOutput('pr_number', relatedPR.number);
              core.setOutput('pr_title', relatedPR.title);
              core.setOutput('pr_url', relatedPR.url);
              return relatedPR;
            } else {
              console.log('Could not find related PR for this commit');
              return null;
            }

      - name: Comment on PR
        if: steps.validation.outputs.validation_passed == 'true' && steps.update-index.outputs.index_updated == 'true' && steps.find-pr.outputs.pr_number != ''
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const prNumber = ${{ steps.find-pr.outputs.pr_number }};

            if (!prNumber) {
              console.log('No PR number found, skipping comment');
              return;
            }

            const body = `## 🤖 Agent Index Updated

            The agent index has been automatically updated following the merge of this PR.

            [View the updated index](${context.payload.repository.html_url}/blob/main/agent_index.json)
            `;

            github.rest.issues.createComment({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

      - name: Create issue for validation failure
        if: steps.validation.outputs.validation_passed == 'false'
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs');

            // Get both the detailed logs and the error summary
            let validationLog = '';
            let errorSummary = '';

            try {
              validationLog = fs.readFileSync('validation_logs/validation_results.txt', 'utf8');
              errorSummary = '${{ steps.validation.outputs.error_summary }}';
              
              // Truncate if too long for an issue
              if (validationLog.length > 30000) {
                validationLog = validationLog.substring(0, 30000) + '\n\n... (output truncated)';
              }
            } catch (error) {
              validationLog = 'Error reading validation log: ' + error.message;
            }

            const issue = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 Agent validation failed on direct push to main',
              body: `One or more agent YAML files that were pushed directly to the main branch failed validation.
              
              **⚠️ The agent index was NOT updated due to validation failure.**
              
              Triggered by: ${context.payload.head_commit.message}
              Commit: ${context.payload.head_commit.id}
              Workflow run: ${context.payload.repository.html_url}/actions/runs/${context.runId}
              
              ## Validation Error Summary
              
              \`\`\`
              ${errorSummary}
              \`\`\`
              
              ## Complete Validation Log
              
              \`\`\`
              ${validationLog}
              \`\`\`
              
              Please fix the validation issues and push again, or create a PR to resolve the issues.`
            };

            github.rest.issues.create(issue);

      - name: Notify on failure
        if: failure() && steps.validation.outputs.validation_passed != 'false'
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const issue = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 Failed to update agent index',
              body: `The workflow to update the agent index failed due to an unexpected error.
              
              Triggered by: ${context.payload.head_commit.message}
              Commit: ${context.payload.head_commit.id}
              Workflow run: ${context.payload.repository.html_url}/actions/runs/${context.runId}
              
              Please investigate and fix the issue.`
            };

            github.rest.issues.create(issue);
