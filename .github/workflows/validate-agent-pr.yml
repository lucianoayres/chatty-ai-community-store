name: Validate Agent PR

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - "agents/**.yaml"

jobs:
  pre-check:
    name: Basic YAML Syntax Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install basic dependencies
        run: pip install pyyaml

      - name: Basic YAML syntax check
        id: syntax-check
        run: |
          echo "::group::YAML Syntax Validation"
          FAILED_FILES=""

          for file in $(git diff --name-only --diff-filter=ACMRT ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep "^agents/.*\.yaml$"); do
            echo "Checking syntax for $file"
            if ! python -c "import yaml; yaml.safe_load(open('$file'))"; then
              FAILED_FILES="$FAILED_FILES\n- $file"
              echo "::error file=$file::YAML syntax validation failed"
            fi
          done

          if [ -n "$FAILED_FILES" ]; then
            echo "::set-output name=failed_files::$FAILED_FILES"
            echo "Syntax check failed for the following files:$FAILED_FILES"
            exit 1
          else
            echo "All YAML files passed basic syntax check"
          fi
          echo "::endgroup::"
    outputs:
      failed_files: ${{ steps.syntax-check.outputs.failed_files }}

  full-validation:
    name: Full Agent Validation
    needs: pre-check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          pip install pyyaml jsonschema yamale

      - name: Run agent validator
        id: validator
        run: |
          echo "::group::Full YAML Schema Validation"
          mkdir -p validation_logs
          VALIDATION_LOG="validation_logs/validation_results.txt"
          ERROR_SUMMARY="validation_logs/error_summary.txt"

          # Set up environment for validator
          export PYTHONPATH="$PWD/tools/agent_manager/src:$PYTHONPATH"

          # Get the list of changed YAML files
          CHANGED_FILES=$(git diff --name-only --diff-filter=ACMRT ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep "^agents/.*\.yaml$" || echo "")

          if [ -z "$CHANGED_FILES" ]; then
            echo "No agent YAML files were changed in this PR."
            exit 0
          fi

          # Initialize error summary
          echo "# Validation Results" > $ERROR_SUMMARY
          echo "" >> $ERROR_SUMMARY

          # Validate each changed file
          echo "Validating agent files:" | tee -a $VALIDATION_LOG
          echo "$CHANGED_FILES" | tee -a $VALIDATION_LOG
          echo "" | tee -a $VALIDATION_LOG

          FAIL_COUNT=0

          for file in $CHANGED_FILES; do
            echo "🔍 Validating $file..." | tee -a $VALIDATION_LOG
            echo "=============================================" | tee -a $VALIDATION_LOG
            
            # Run validator and capture ALL output
            VALIDATION_OUTPUT=$(python tools/agent_manager/src/validator.py \
              --yaml-schema schemas/agent.schema.yaml \
              --file "$file" \
              --tag-definitions tags.json \
              --verbose \
              2>&1)
            
            VALIDATION_EXIT_CODE=$?
            
            # Save complete output to log
            echo "$VALIDATION_OUTPUT" >> $VALIDATION_LOG
            
            # Process validation results
            if [ $VALIDATION_EXIT_CODE -ne 0 ]; then
              FAIL_COUNT=$((FAIL_COUNT+1))
              
              # Add to error summary
              echo "## ❌ $file" | tee -a $ERROR_SUMMARY
              echo '```' | tee -a $ERROR_SUMMARY
              
              # Extract and display ALL validation errors
              ERROR_DETAILS=$(echo "$VALIDATION_OUTPUT" | grep -A 2 -B 1 -E "Error:|Warning:|Missing|Invalid|failed|required|validation error|schema validation")
              
              if [ -n "$ERROR_DETAILS" ]; then
                # Display full error details in both workflow and summary
                echo "$ERROR_DETAILS" | tee -a $ERROR_SUMMARY >&2
                
                # Create GitHub annotations for each error
                echo "$ERROR_DETAILS" | while read -r line; do
                  if [[ $line =~ Error:|Warning:|Missing|Invalid|failed|required|validation ]]; then
                    echo "::error file=$file::$line"
                  fi
                done
              else
                # If no specific errors found, show full output
                echo "$VALIDATION_OUTPUT" | tee -a $ERROR_SUMMARY >&2
              fi
              
              echo '```' | tee -a $ERROR_SUMMARY
              echo "" | tee -a $ERROR_SUMMARY
            else
              echo "✅ File passed validation: $file" | tee -a $VALIDATION_LOG
              echo "## ✅ $file" >> $ERROR_SUMMARY
              echo "Passed all validation checks" >> $ERROR_SUMMARY
              echo "" >> $ERROR_SUMMARY
            fi
            
            echo "=============================================" | tee -a $VALIDATION_LOG
            echo "" | tee -a $VALIDATION_LOG
          done

          # Show final results
          if [ $FAIL_COUNT -gt 0 ]; then
            echo "::error::❌ Validation failed for $FAIL_COUNT file(s)"
            echo "validation_failed=true" >> $GITHUB_OUTPUT
            echo "fail_count=$FAIL_COUNT" >> $GITHUB_OUTPUT
            
            # Save error summary
            echo "error_summary<<EOF" >> $GITHUB_OUTPUT
            cat $ERROR_SUMMARY >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            
            exit 1
          else
            echo "✅ All files passed validation!"
            echo "validation_failed=false" >> $GITHUB_OUTPUT
          fi
          echo "::endgroup::"

      - name: Upload validation results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: validation-results
          path: validation_logs/

      - name: Post validation results as comment
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs');
            const validationFailed = '${{ steps.validator.outputs.validation_failed }}' === 'true';
            const failCount = '${{ steps.validator.outputs.fail_count }}';

            let errorSummary = '';
            try {
              errorSummary = fs.readFileSync('validation_logs/error_summary.txt', 'utf8');
            } catch (error) {
              errorSummary = 'Error reading validation summary: ' + error.message;
            }

            let body = '## Agent Validation Results\n\n';

            if (validationFailed) {
              body += `### ❌ Validation Failed\n\n`;
              body += `${failCount} file(s) did not pass validation.\n\n`;
              body += '### Detailed Results\n\n';
              body += errorSummary;
              body += '\n\n### Next Steps\n\n';
              body += '1. Review the validation errors above\n';
              body += '2. Fix the issues in your agent file(s)\n';
              body += '3. Push the changes to update this PR\n';
              body += '4. Wait for validation to run again\n\n';
              body += '> Note: Your PR cannot be merged until all validation checks pass.';
            } else {
              body += '### ✅ All Files Passed Validation!\n\n';
              body += 'Your agent files are properly formatted and ready for review.';
            }

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

      - name: Add labels based on validation result
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const validationFailed = '${{ steps.validator.outputs.validation_failed }}' === 'true';

            // Remove existing validation labels
            const labels = ['validation-failed', 'validation-passed'];
            for (const label of labels) {
              try {
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  name: label
                });
              } catch (e) {
                // Ignore errors from non-existent labels
              }
            }

            // Add appropriate label
            const newLabel = validationFailed ? 'validation-failed' : 'validation-passed';
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: [newLabel]
            });
