name: Quarantine Invalid Agent Files

on:
  workflow_run:
    workflows: ["Update Agent Index"]
    types:
      - completed
    branches:
      - main

permissions:
  contents: write
  issues: write
  pull-requests: read

jobs:
  quarantine-invalid:
    name: Move Invalid Agent Files to Invalid Directory
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'failure' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify changes in agents directory
        id: verify-changes
        run: |
          # Just a safety check to ensure we only quarantine changes that affect agent files
          echo "Verifying that the changes were in the agents directory..."

          # Fetch the commit details from the original workflow
          COMMIT_SHA="${{ github.event.workflow_run.head_sha }}"

          # Check if this commit affected files in the agents directory (both .yaml and .yml extensions)
          CHANGED_AGENT_FILES=$(git diff-tree --no-commit-id --name-only -r $COMMIT_SHA | grep "^agents/" | grep -E "\.(yaml|yml)$" | grep -v "^agents/invalid/" || echo "")

          if [ -z "$CHANGED_AGENT_FILES" ]; then
            echo "No agent YAML files were changed in this commit. Skipping quarantine."
            echo "should_quarantine=false" >> $GITHUB_OUTPUT
          else
            echo "Found changed agent files:"
            echo "$CHANGED_AGENT_FILES"
            echo "should_quarantine=true" >> $GITHUB_OUTPUT
          fi

      - name: Download workflow logs
        id: download-logs
        if: steps.verify-changes.outputs.should_quarantine == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs');

            // Create logs directory
            fs.mkdirSync('logs', { recursive: true });

            try {
              // Get the workflow logs
              const logs = await github.rest.actions.downloadWorkflowRunLogs({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: context.payload.workflow_run.id
              });
              
              // Write logs to file
              fs.writeFileSync('logs/workflow.zip', Buffer.from(logs.data));
              console.log('Downloaded workflow logs');
              
              // Try to unzip and extract error information
              const { execSync } = require('child_process');
              execSync('mkdir -p logs/extracted && unzip -o logs/workflow.zip -d logs/extracted');
              
              // Extract validation errors from logs if possible
              let errorSummary = '';
              try {
                const allLogs = fs.readdirSync('logs/extracted');
                for (const logFile of allLogs) {
                  const content = fs.readFileSync(`logs/extracted/${logFile}`, 'utf8');
                  // Look for validation error sections
                  if (content.includes('VALIDATION FAILED') || content.includes('Error:')) {
                    errorSummary = content.match(/VALIDATION ERRORS:[\s\S]+?(?=\n\n|\n===|$)/g) || '';
                    if (errorSummary) break;
                  }
                }
              } catch (e) {
                console.log('Error parsing logs:', e);
              }
              
              core.setOutput('error_summary', errorSummary || 'No specific error details found');
              return true;
            } catch (e) {
              console.log('Error downloading logs:', e);
              return false;
            }

      - name: Check if validation failed
        id: check-validation
        if: steps.verify-changes.outputs.should_quarantine == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const workflowRun = context.payload.workflow_run;

            // Get workflow jobs
            const jobs = await github.rest.actions.listJobsForWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: workflowRun.id
            });

            // Check for validation failure
            let validationFailed = false;
            let invalidFiles = [];

            for (const job of jobs.data.jobs) {
              // Look for steps with names containing "Validate"
              const validationStep = job.steps.find(step => 
                step.name.includes('Validate') && step.conclusion === 'failure'
              );
              
              if (validationStep) {
                validationFailed = true;
                break;
              }
            }

            // Get the artifacts to find specific invalid files
            try {
              const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: workflowRun.id
              });
              
              // Look for validation results artifact
              const validationArtifact = artifacts.data.artifacts.find(
                artifact => artifact.name === "validation-results"
              );
              
              if (validationArtifact) {
                console.log('Found validation results artifact');
                core.setOutput('has_artifacts', 'true');
              } else {
                console.log('No validation results artifact found');
                core.setOutput('has_artifacts', 'false');
              }
            } catch (e) {
              console.log('Error checking artifacts:', e);
            }

            core.setOutput('validation_failed', validationFailed);
            return validationFailed;

      - name: Create invalid directory
        if: steps.verify-changes.outputs.should_quarantine == 'true' && steps.check-validation.outputs.validation_failed == 'true'
        run: |
          # Create invalid directory if it doesn't exist
          if [ ! -d "agents/invalid" ]; then
            echo "Creating agents/invalid directory for the first time"
            mkdir -p agents/invalid
            
            # Create a simple README without heredoc to avoid syntax issues
            echo "# Invalid Agent Files" > agents/invalid/README.md
            echo "" >> agents/invalid/README.md
            echo "This directory contains agent files that failed validation but were preserved for reference." >> agents/invalid/README.md
            echo "" >> agents/invalid/README.md
            echo "## Why Files are Here" >> agents/invalid/README.md
            echo "" >> agents/invalid/README.md
            echo "Files in this directory were automatically moved here by the quarantine workflow when they:" >> agents/invalid/README.md
            echo "1. Failed validation checks" >> agents/invalid/README.md
            echo "2. Were pushed directly to the main branch" >> agents/invalid/README.md
            echo "" >> agents/invalid/README.md
            echo "## How to Fix" >> agents/invalid/README.md
            echo "" >> agents/invalid/README.md
            echo "1. Review the validation errors (available in the associated GitHub issue)" >> agents/invalid/README.md
            echo "2. Make the necessary corrections" >> agents/invalid/README.md
            echo "3. Create a PR with the fixed file in the main \`agents/\` directory" >> agents/invalid/README.md
            echo "" >> agents/invalid/README.md
            echo "## Naming Convention" >> agents/invalid/README.md
            echo "" >> agents/invalid/README.md
            echo "Files here follow the pattern: \`original_filename_TIMESTAMP.yaml\`" >> agents/invalid/README.md
            echo "The timestamp helps avoid name collisions if the same file is quarantined multiple times." >> agents/invalid/README.md
          else
            echo "agents/invalid directory already exists"
          fi

      - name: Quarantine invalid files
        if: steps.verify-changes.outputs.should_quarantine == 'true' && steps.check-validation.outputs.validation_failed == 'true'
        run: |
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Quarantine Bot"

          # Get the commit info
          COMMIT_HASH=${{ github.event.workflow_run.head_sha }}
          COMMIT_MSG=$(git log -1 --pretty=%B $COMMIT_HASH)
          COMMIT_SHORT=$(git rev-parse --short $COMMIT_HASH)

          # Get changed files
          CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r $COMMIT_HASH | grep "^agents/" | grep -E "\.(yaml|yml)$" | grep -v "^agents/invalid/" || echo "")
          if [ -n "$CHANGED_FILES" ]; then
            echo "Changed YAML files in this commit:"
            echo "$CHANGED_FILES"
            echo "CHANGED_FILES<<EOF" >> $GITHUB_ENV
            echo "$CHANGED_FILES" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          else
            echo "No agent files found to quarantine. This is unexpected."
            exit 0
          fi

          # Store commit info in env vars for later use
          echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_ENV
          echo "COMMIT_SHORT=$COMMIT_SHORT" >> $GITHUB_ENV
          echo "COMMIT_MSG=$COMMIT_MSG" >> $GITHUB_ENV

          # For each invalid file, move it to the invalid directory
          MOVED_FILES=""
          for file in $CHANGED_FILES; do
            # Skip if file doesn't exist (shouldn't happen, but just in case)
            if [ ! -f "$file" ]; then
              echo "Warning: File $file not found, skipping"
              continue
            fi
            
            filename=$(basename "$file")
            # Add a timestamp to avoid name collisions - ensure consistent extension
            timestamp=$(date +%Y%m%d_%H%M%S)
            extension="${filename##*.}"
            basename="${filename%.*}"
            new_location="agents/invalid/${basename}_${timestamp}.${extension}"
            
            echo "Moving $file to $new_location"
            cp "$file" "$new_location"
            
            # Add a comment to the invalid file noting why it was moved
            echo -e "\n# File moved to invalid directory due to validation failure on $(date)" >> "$new_location"
            echo "# Original location: $file" >> "$new_location"
            echo "# From commit: $COMMIT_SHORT" >> "$new_location"
            
            # Stage the new file
            git add "$new_location"
            
            # Keep track of moved files for the commit message
            MOVED_FILES="$MOVED_FILES\n- $file → $new_location"
          done

          # Only proceed if we actually moved files
          if [ -z "$MOVED_FILES" ]; then
            echo "No files were moved to quarantine. Exiting."
            exit 0
          fi

          echo "MOVED_FILES<<EOF" >> $GITHUB_ENV
          echo -e "$MOVED_FILES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          # Make sure the README.md is also staged if it was just created
          git add agents/invalid/README.md

          # Commit the quarantined files
          git commit -m "📦 Move invalid agent files to quarantine" \
            -m "The following files failed validation and were moved to the invalid directory:" \
            -m "$(echo -e "$MOVED_FILES")" \
            -m "Original commit: $COMMIT_SHORT" \
            -m "See workflow run for details: ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"

          # Push the changes
          git push

      - name: Create issue about quarantined files
        if: steps.verify-changes.outputs.should_quarantine == 'true' && steps.check-validation.outputs.validation_failed == 'true'
        run: |
          # Create issue template
          cat > issue_body.md << 'EOL'
          ## Invalid Agent Files Moved to Quarantine

          One or more agent YAML files that were pushed directly to the main branch failed validation and have been moved to the `agents/invalid` directory for safekeeping.

          ### Details
          - **Original Commit**: $COMMIT_SHORT
          - **Commit Message**: $COMMIT_MSG
          - **Validation Workflow Run**: $WORKFLOW_RUN_URL
          - **Quarantine Action Run**: $QUARANTINE_WORKFLOW_URL

          ### Moved Files
          $MOVED_FILES

          ### Validation Errors
          ```
          $ERROR_SUMMARY
          ```

          ### How to Fix
          1. Clone the repository and check out the quarantined files in the `agents/invalid` directory
          2. Fix the validation issues
          3. Create a new branch with your corrected files in the proper `agents` directory
          4. Submit a PR for review

          ### Need Help?
          - Review the [agent schema](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/blob/main/schemas/agent.schema.yaml) for required fields
          - Check [existing agents](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/tree/main/agents) for examples
          - See the [contributing guide](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/blob/main/CONTRIBUTING.md) for more information

          This automated quarantine helps maintain the quality of our agent repository while preserving your work.
          EOL

          # Replace variables in the template
          # Better error extraction from logs using multiple patterns
          ERROR_SUMMARY=""
          VALIDATION_PATTERNS=(
            'VALIDATION ERRORS'
            'Error:'
            'Missing required fields'
            'Validation failed'
            'validation error'
            'YAML schema validation error'
          )

          # Try multiple methods to find error info
          for PATTERN in "${VALIDATION_PATTERNS[@]}"; do
            # Try to extract error info using grep with context
            FOUND_ERRORS=$(find logs/extracted -type f -exec grep -A 10 -B 2 "$PATTERN" {} \; 2>/dev/null)
            if [ -n "$FOUND_ERRORS" ]; then
              # Append to our error summary
              ERROR_SUMMARY="${ERROR_SUMMARY}${FOUND_ERRORS}\n\n"
            fi
          done

          # Fallback if still no errors found
          if [ -z "$ERROR_SUMMARY" ]; then
            ERROR_SUMMARY="$(cat logs/extracted/*validation* 2>/dev/null | grep -A 10 -B 5 -E "Error|fail|invalid" || echo "No specific error details found")"
          fi

          # Trim to reasonable size if needed
          ERROR_SUMMARY=$(echo "$ERROR_SUMMARY" | head -n 30)

          WORKFLOW_RUN_URL="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${{ github.event.workflow_run.id }}"
          QUARANTINE_WORKFLOW_URL="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"

          sed -i "s|\$COMMIT_SHORT|${COMMIT_SHORT}|g" issue_body.md
          sed -i "s|\$COMMIT_MSG|${COMMIT_MSG}|g" issue_body.md
          sed -i "s|\$WORKFLOW_RUN_URL|${WORKFLOW_RUN_URL}|g" issue_body.md
          sed -i "s|\$QUARANTINE_WORKFLOW_URL|${QUARANTINE_WORKFLOW_URL}|g" issue_body.md
          sed -i "s|\$MOVED_FILES|${MOVED_FILES}|g" issue_body.md

          # Add error summary carefully to avoid sed issues with special characters
          awk -v er="$ERROR_SUMMARY" '{gsub(/\$ERROR_SUMMARY/, er)}1' issue_body.md > issue_body_with_errors.md
          mv issue_body_with_errors.md issue_body.md

      - name: Submit issue
        if: steps.verify-changes.outputs.should_quarantine == 'true' && steps.check-validation.outputs.validation_failed == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs');

            // Read issue body from file
            const issueBody = fs.readFileSync('issue_body.md', 'utf8');
            const shortCommit = process.env.COMMIT_SHORT || 'unknown';

            const issue = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `📦 Invalid agent files moved to quarantine (commit ${shortCommit})`,
              body: issueBody,
              labels: ['quarantined', 'validation-failed', 'needs-fix']
            };

            try {
              const result = await github.rest.issues.create(issue);
              console.log(`Issue created: ${result.data.html_url}`);
            } catch (e) {
              console.log('Error creating issue:', e);
            }
