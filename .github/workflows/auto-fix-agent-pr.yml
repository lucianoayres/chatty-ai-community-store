name: Auto-Recovery for Quarantined Agent Files

on:
  workflow_run:
    workflows: ["Update Agent Index", "Quarantine Invalid Agent Files"]
    types:
      - completed
    branches:
      - main

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  check-if-needed:
    name: Check If Recovery Is Needed
    runs-on: ubuntu-latest
    # Only run if:
    # 1. Update Agent Index failed (likely validation issue), OR
    # 2. Quarantine Invalid Agent Files succeeded (files were actually quarantined)
    if: ${{ github.event.workflow_run.conclusion == 'failure' && github.event.workflow_run.name == 'Update Agent Index' || (github.event.workflow_run.name == 'Quarantine Invalid Agent Files' && github.event.workflow_run.conclusion == 'success') }}

    outputs:
      continue: ${{ steps.check-artifacts.outputs.has_validation_artifacts }}

    steps:
      - name: Check for validation artifacts
        id: check-artifacts
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            // Get the artifacts from the triggering workflow
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.payload.workflow_run.id
            });

            // Find validation results artifact
            const validationArtifact = artifacts.data.artifacts.find(
              artifact => artifact.name === "validation-results"
            );

            if (!validationArtifact) {
              console.log('No validation results artifact found - no fixes needed');
              return core.setOutput('has_validation_artifacts', 'false');
            }

            console.log('Found validation artifacts - auto-fix may be needed');
            return core.setOutput('has_validation_artifacts', 'true');

  create-fix-pr:
    name: Attempt Recovery and Create PR
    runs-on: ubuntu-latest
    needs: check-if-needed
    if: ${{ needs.check-if-needed.outputs.continue == 'true' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          pip install pyyaml jsonschema yamale

      - name: Download workflow artifacts
        id: download-artifact
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs');

            // Create artifacts directory
            fs.mkdirSync('artifacts', { recursive: true });

            // Get the artifacts from the failed workflow
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.payload.workflow_run.id
            });

            // Find validation results artifact
            const validationArtifact = artifacts.data.artifacts.find(
              artifact => artifact.name === "validation-results"
            );

            if (!validationArtifact) {
              console.log('No validation results artifact found');
              return false;
            }

            // Download the artifact
            const download = await github.rest.actions.downloadArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: validationArtifact.id,
              archive_format: 'zip'
            });

            // Write the zip to disk
            fs.writeFileSync('artifacts/validation.zip', Buffer.from(download.data));
            console.log('Downloaded validation artifact');

            // Extract validation info
            const { execSync } = require('child_process');
            execSync('unzip -o artifacts/validation.zip -d artifacts/');

            return true;

      - name: Identify and fix invalid files
        id: fix-files
        run: |
          # Set up output variables
          echo "fixed_files=false" >> $GITHUB_OUTPUT

          # Create a new branch for fixes
          BRANCH_NAME="fix-invalid-agents-$(date +%s)"
          git checkout -b $BRANCH_NAME
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

          # Store validation errors if available
          ERROR_SUMMARY=""
          if [ -f "artifacts/error_summary.txt" ]; then
            ERROR_SUMMARY=$(cat artifacts/error_summary.txt)
            echo "Found validation errors from workflow artifact:"
            echo "$ERROR_SUMMARY"
          elif [ -f "validation_logs/error_summary.txt" ]; then
            ERROR_SUMMARY=$(cat validation_logs/error_summary.txt)
            echo "Found validation errors from workflow artifact:"
            echo "$ERROR_SUMMARY"
          else
            echo "No error summary found from validation workflow"
          fi

          # Find invalid files from the error summary
          INVALID_FILES_FROM_ERRORS=""
          if [ -n "$ERROR_SUMMARY" ]; then
            echo "Extracting invalid files from error summary..."
            # Extract filenames that failed validation (assuming they're reported with filename:)
            INVALID_FILES_FROM_ERRORS=$(echo "$ERROR_SUMMARY" | grep -o 'agents/[^ ]*\.ya\?ml' || echo "")
            if [ -n "$INVALID_FILES_FROM_ERRORS" ]; then
              echo "Found invalid files from error summary:"
              echo "$INVALID_FILES_FROM_ERRORS"
            fi
          fi

          # Find quarantined files (safely handle if directory does not exist yet)
          QUARANTINED_FILES=""
          if [ -d "agents/invalid" ]; then
            echo "Checking for quarantined files..."
            QUARANTINED_FILES=$(find agents/invalid -name "*.yaml" -o -name "*.yml" 2>/dev/null || echo "")
            if [ -n "$QUARANTINED_FILES" ]; then
              echo "Found quarantined files:"
              echo "$QUARANTINED_FILES"
            else
              echo "No quarantined files found in agents/invalid directory"
            fi
          else
            echo "No agents/invalid directory exists yet - skipping check for quarantined files"
          fi

          # Early exit if nothing to fix
          if [ -z "$INVALID_FILES_FROM_ERRORS" ] && [ -z "$QUARANTINED_FILES" ]; then
            echo "No invalid files or quarantined files found - nothing to fix"
            echo "::error::No files to fix were found. Exiting workflow."
            exit 1
          fi

          # Function to apply common fixes to YAML files
          fix_yaml_file() {
            local file="$1"
            local fixed=false
            echo "Attempting to fix $file..."
            
            # Check if file exists
            if [ ! -f "$file" ]; then
              echo "Warning: File $file does not exist, skipping"
              echo "false"
              return
            fi
            
            # Read file content
            content=$(cat "$file")
            
            # Check if it's valid yaml
            if ! python -c "import yaml; yaml.safe_load(open('$file'))"; then
              echo "Cannot fix $file - not valid YAML structure"
              echo "false"
              return
            fi

            # Apply common fixes
            # 1. Missing tags
            if ! grep -q "^tags:" "$file"; then
              echo "Adding missing tags field"
              echo -e "\ntags: [bot, assistant]" >> "$file"
              fixed=true
            fi
            
            # 2. Missing name
            if ! grep -q "^name:" "$file"; then
              echo "Adding missing name field"
              basename=$(basename "$file" | sed 's/\.[^.]*$//')
              echo -e "\nname: ${basename}" >> "$file"
              fixed=true
            fi
            
            # 3. Missing emoji
            if ! grep -q "^emoji:" "$file"; then
              echo "Adding missing emoji field"
              echo -e "\nemoji: ü§ñ" >> "$file"
              fixed=true
            fi
            
            # 4. Missing description
            if ! grep -q "^description:" "$file"; then
              echo "Adding missing description field"
              echo -e "\ndescription: This is an AI assistant that helps users with various tasks." >> "$file"
              fixed=true
            fi
            
            # 5. Missing label_color
            if ! grep -q "^label_color:" "$file"; then
              echo "Adding missing label_color field"
              echo -e "\nlabel_color: #3B82F6" >> "$file"
              fixed=true
            fi
            
            # 6. Missing text_color
            if ! grep -q "^text_color:" "$file"; then
              echo "Adding missing text_color field"
              echo -e "\ntext_color: #FFFFFF" >> "$file"
              fixed=true
            fi
            
            # 7. Missing is_default
            if ! grep -q "^is_default:" "$file"; then
              echo "Adding missing is_default field"
              echo -e "\nis_default: false" >> "$file"
              fixed=true
            fi
            
            # Return whether we fixed anything
            echo "$fixed"
          }

          # Process all invalid files
          ALL_FIXED_FILES=""
          FIXED_COUNT=0

          # Fix files from validation errors
          if [ -n "$INVALID_FILES_FROM_ERRORS" ]; then
            for file in $INVALID_FILES_FROM_ERRORS; do
              if [ -f "$file" ]; then
                fixed=$(fix_yaml_file "$file")
                if [ "$fixed" = "true" ]; then
                  ALL_FIXED_FILES="$ALL_FIXED_FILES $file"
                  FIXED_COUNT=$((FIXED_COUNT + 1))
                  echo "‚úÖ Fixed $file"
                else
                  echo "‚ùå Could not fix $file"
                fi
              else
                echo "‚ö†Ô∏è File $file no longer exists, skipping"
              fi
            done
          fi

          # Fix quarantined files - move them back to agents/ directory if fixable
          if [ -n "$QUARANTINED_FILES" ]; then
            for qfile in $QUARANTINED_FILES; do
              # Determine the original filename by removing timestamp and path
              original_name=$(basename "$qfile" | sed -E 's/_[0-9]{8}_[0-9]{6}\.(ya?ml)$/.\1/')
              target_file="agents/$original_name"
              
              # Make a temporary copy to try fixing
              cp "$qfile" "temp_fix_file.yaml"
              fixed=$(fix_yaml_file "temp_fix_file.yaml")
              
              if [ "$fixed" = "true" ]; then
                # Move the fixed file back to agents directory
                mv "temp_fix_file.yaml" "$target_file"
                echo "‚úÖ Restored and fixed quarantined file: $qfile ‚Üí $target_file"
                ALL_FIXED_FILES="$ALL_FIXED_FILES $target_file"
                FIXED_COUNT=$((FIXED_COUNT + 1))
              else
                echo "‚ùå Could not fix quarantined file: $qfile"
                rm -f "temp_fix_file.yaml"
              fi
            done
          fi

          # Output whether we fixed any files
          if [ $FIXED_COUNT -gt 0 ]; then
            echo "Fixed $FIXED_COUNT files"
            echo "fixed_files=true" >> $GITHUB_OUTPUT
            echo "ALL_FIXED_FILES<<EOF" >> $GITHUB_ENV
            echo "$ALL_FIXED_FILES" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
            echo "FIXED_COUNT=$FIXED_COUNT" >> $GITHUB_ENV
            
            # Configure git and commit changes
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Auto-Fix Bot"
            
            # Add all fixed files
            for file in $ALL_FIXED_FILES; do
              git add "$file"
            done
            
            # Commit the changes
            git commit -m "üõ†Ô∏è Auto-fix: Fix invalid agent files" \
              -m "Fixed $FIXED_COUNT files with validation issues" \
              -m "This commit fixes common issues like missing fields and format problems."
              
            # Push the branch
            git push origin $BRANCH_NAME
          else
            echo "No files could be fixed automatically"
            echo "::error::Found invalid files but could not fix them automatically. Manual intervention required."
            exit 1
          fi

      - name: Create Pull Request
        if: steps.fix-files.outputs.fixed_files == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fixedCount = process.env.FIXED_COUNT || '0';
            const fixedFiles = process.env.ALL_FIXED_FILES || 'No files specified';
            const branchName = process.env.BRANCH_NAME || '';

            // Make sure we have a branch name
            if (!branchName) {
              console.log('No branch name provided, cannot create PR');
              return;
            }

            const pr = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: "üõ†Ô∏è Auto-fix: Fix invalid agent files",
              body: "This PR contains automatic fixes for invalid agent files that were detected by the validation workflow.\n\n" +
                    "## What was fixed\n" +
                    fixedFiles + "\n\n" +
                    "## Actions Taken\n" +
                    "* Added missing required fields\n" +
                    "* Fixed formatting issues\n" +
                    "* Restored files from quarantine with corrections\n\n" +
                    "Please review these changes carefully before merging.\n\n" +
                    "Related workflow run: " + context.payload.workflow_run.html_url,
              head: branchName,
              base: 'main'
            });

            // Comment on the PR with additional information
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.data.number,
              body: "## Auto-Fix Details\n\n" +
                    "This Pull Request was automatically created to fix validation issues in agent files.\n\n" +
                    "### How to proceed:\n" +
                    "1. Review each modified file to ensure the automatic fixes are appropriate\n" +
                    "2. Make any additional manual fixes if needed\n" +
                    "3. Merge the PR if satisfied with the changes\n\n" +
                    "The bot made its best effort to fix common issues like missing required fields, but human review is still important before merging."
            });

            console.log(`Pull request created: ${pr.data.html_url}`);
